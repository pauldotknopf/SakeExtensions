use namespace="System"
use namespace="System.IO"
use namespace="System.Diagnostics"

use import="Environment"
use import="Files"
use import="PathResolver"
use import="Regex"

functions @{
  bool TestCommand(string program, string commandline)
  {
    // Tests whether a given command succeeds at the command line.
    // Useful for testing whether a given command is installed and on the path, e.g. node
    ProcessStartInfo processStartInfo;

    if(!IsLinux)
    {
      processStartInfo = new ProcessStartInfo {
      UseShellExecute = false,
      FileName = "cmd",
      Arguments = "/C " + program + " " + commandline,
      };
    } else
    {
      processStartInfo = new ProcessStartInfo {
      UseShellExecute = false,
      FileName = program,
      Arguments = commandline,
      };
    }
    try
    {
      Log.Info(string.Format("Testing for command: {0} {1}", program, commandline));
      var process = Process.Start(processStartInfo);
      process.WaitForExit();
      if (process.ExitCode == 0)
      {
        Log.Info("   command found (0 exit code)");
        return true;
      }
      else
      {
        Log.Warn("   command not found (non-0 exit code)");
        return false;
      }
    }
    catch (Exception ex)
    {
      Log.Warn("   command exception: " + ex.ToString());
      Log.Warn("   command not found");
      return false;
    }
  }

  string E(string key) { return Environment.GetEnvironmentVariable(key); }
  void E(string key, string value) { Environment.SetEnvironmentVariable(key, value); }
}

macro name="DeleteFolder" delete='string'
    directory

macro name="CopyFolder" sourceDir='string' outputDir='string' overwrite='bool'
    copy