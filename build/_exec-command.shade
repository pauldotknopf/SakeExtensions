
use namespace="System.Diagnostics"
use namespace="System.IO"

default workingdir="${Directory.GetCurrentDirectory()}"
default commandline=""

log info="Exec"
log info="  commandline: ${commandline}"
log info="  workingdir: ${workingdir}"


functions
    @{
        bool __WriteExecOutputToLogger { get; set; }
    }

@{
    // Tests whether a given command succeeds at the command line.
    // Useful for testing whether a given command is installed and on the path, e.g. node
    ProcessStartInfo processStartInfo;

    if(!IsLinux)
    {
        processStartInfo = new ProcessStartInfo {
            UseShellExecute = false,
            WorkingDirectory = workingdir,
            FileName = "cmd",
            Arguments = "/C " + commandline,
        };
    } else
    {
        processStartInfo = new ProcessStartInfo {
            UseShellExecute = false,
            WorkingDirectory = workingdir,
            Arguments = commandline,
        };
    }

    if (__WriteExecOutputToLogger)
    {
        processStartInfo.RedirectStandardError = true;
        processStartInfo.RedirectStandardOutput = true;
    }

    using (var process = Process.Start(processStartInfo))
    {
        if (__WriteExecOutputToLogger)
        {
            process.EnableRaisingEvents = true;
            process.BeginOutputReadLine();
            process.BeginErrorReadLine();

            process.ErrorDataReceived += (sender, eventArgs) =>
            {
                if (!string.IsNullOrWhiteSpace(eventArgs.Data))
                {
                    Log.Error(eventArgs.Data);
                }
            };

            process.OutputDataReceived += (sender, eventArgs) =>
            {
                Log.Info(eventArgs.Data);
            };
        }

        process.WaitForExit();

        if (process.ExitCode != 0)
        {
            throw new Exception(string.Format("Exit code {0} from {1}", process.ExitCode, commandline));
        }

        ICollection envVarsSpawnedProcess = process.StartInfo.EnvironmentVariables.Keys;

        foreach(var envv in envVarsSpawnedProcess)
        {
            Log.Error("Found::::" + envv);
        }
    }
}

