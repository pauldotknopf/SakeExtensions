use import="Json"
use import="Environment"

default NO_PARALLEL_TEST_PROJECTS='${E("SAKEEXTENSIONS_NO_PARALLEL_TEST_PROJECTS")}'
default SAKEEXTENSIONS_TEST_DNXCORE='${E("SAKEEXTENSIONS_TEST_DNXCORE")}'

@{
    var projectText = File.ReadAllText(projectFile);
    var project = (JsonObject)Json.Deserialize(projectText);

    var commands = project.ValueAsJsonObject("commands");

    if (commands != null && commands.Keys.Contains("test"))
    {
        var projectFolder = Path.GetDirectoryName(projectFile);
        var projectName = Path.GetFileName(projectFolder);

        var noParallelTestProjects = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
        if (!string.IsNullOrEmpty(NO_PARALLEL_TEST_PROJECTS))
        {
            noParallelTestProjects.UnionWith(NO_PARALLEL_TEST_PROJECTS.Split((char)','));
        }

        var configs = project.ValueAsJsonObject("frameworks");
        IEnumerable<string> targetFrameworks;
        if (configs == null)
        {
            // Assume dnx451 only if none specified
            targetFrameworks = new[] { "dnx451" };
        }
        else
        {
            targetFrameworks = configs.Keys;
        }

        // Currently only dnx* targets are supported. See aspnet/Universe#53
        targetFrameworks = targetFrameworks.Where(k => k.StartsWith("dnx", StringComparison.OrdinalIgnoreCase));

        foreach (var framework in targetFrameworks)
        {
            var testArgs = noParallelTestProjects.Contains(projectName) ? " -parallel none" : "";

            if (!framework.StartsWith("dnxcore", StringComparison.OrdinalIgnoreCase))
            {
                if (IsLinux)
                {
                    // Work around issue with testing in parallel on Mono.
                    testArgs = " -parallel none";
                }

                Dnx("test" + testArgs, projectFolder, "");
            }
            else if (!IsLinux || !string.IsNullOrEmpty(SAKEEXTENSIONS_TEST_DNXCORE))
            {
                Dnx("test" + testArgs, projectFolder, "default -runtime coreclr");
            }
        }
    }
}

macro name='Dnx' dnxCommand='string' dnxDir='string' dnvmUse='string'
    dnx